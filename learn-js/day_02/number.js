// number ຈະໃຊ້ເກັບຂໍ້ມູນຕົວເລກ ແບບຈຳນວນເຕັມ ແລະ ແບບທົດສະນິຍົມ

/* ການໃຊ້ຂໍ້ມູນຊະນິດ number ນີ້ ແມ່ນເຮົາຈະໃຊ້ຕໍ່ເມື່ອ ຕ້ອງການເຮັດວຽກກັບຄ່າທີ່ເປັນຕົວເລກ ເຊັ່ນ :
    ອາຍຸ , ຄະແນນ , ເງີນເດືອນ ,  ຈຳນວນສິນຄ້າ , ສະຖິຕິ
    ການຄຳນວນທາງຄະນິດສາດ


    *** ໝາຍເຫດ javascript ໃນການເກັບຂໍ້ມູນ number ຈະມີ data type ຊະນິດທີ່ເກັບລວມກັນ ບໍ່ມີແຍກແບບພາສາອື່ນເຊັ່ນ :
    int , float , double
    => ຕົວເລກພິເສດທີ່ຄວນຮູ້ໄວ້ຄື : Infinity = ເກີດມາຈາກການຫານດ້ວຍສູນ
                            -Infinity = ເກີດມາຈາກຄ່ານ້ອຍກວ່າທີ່ເກັບໄດ້
                            Nan(Not a Number) = ຜົນລັບທີ່ບໍ່ແມ່ນຕົວເລກຈິງເຊັ່ນ : "a" / 2 
                            ການເກັບຄ່າສູງສຸດຂອງ ຕົວເລກແມ່ນ 64 bit 9 ລ້ານໆໆຕົວເລກ ແບ່ງເປັນ 3 ສ່ວນ :
                            1. Sign 1 bit ເກັບພວກ ຖືກກັບຜິດ
                            2. Emponent 11 bit  ເກັບເລກພວກຍົກກຳລັງທີ່ບອກວ່າຄ່າໃດສູງທີ່ສຸດ
                            3. Mantissa 52 bit ເກັບພວກຕົວເລກຈິງ
*/

let age = 22;
let score = 5.00;
let salary = 500;
let total_product = 11;
let statics = 999;


// ຄ່າ Infinity ແມ່ນ ຄ່າທີ່ເກັບແບບ ທີ່ບໍ່ມີຈຸດສິ້ນສຸດ ຫຼື ເກີນຄ່າທີ່ເກັບໄດ້ໃນຄອມພິວເຕີ ຕົວຢ່າງດ້ານລຸ່ມ :

console.log(1 / 0);   // Infinity
console.log(9999999999999999 ** 9999); // Infinity


// ຄ່າ -Infinity ແມ່ນຈະເກີດຂື້ນເມື່ອຄ່າເປັນລົບແລ້ວຖືກຫານດ້ວຍ 0 ຫຼື ຄ່າຕິດລົບເກີນຄ່າທີ່ເກັບໄດ້ໃນຄອມພິວເຕີ ຕົວຢ່າງດ້ານລຸ່ມ :

console.log(-1 / 0);  // -Infinity
console.log(-99999999999999999999999999999 * 9999); // -Infinity


// Nan not a number ຄວາມໝາຍຄື ບໍ່ແມ່ນຕົວເລກແທ້ໆ ຈະເກີດຂື້ນຕໍ່ເມື່ອເຮົາພະຍາຍາມທີ່ຈະ ຄຳນວນທີ່ບໍ່ມີຄວາມໝາຍທາງຄະນິດສາດ ເຊັ່ນ : ເອົາ string / ໃຫ້ ຕົວເລກ ເປັນຕົ້ນ
console.log("hello" * 3); // NaN 
console.log(0 / 0);       // NaN 


/* 



Bit (ບິດ) = ແມ່ນຫົວໜ່ວຍຂໍ້ມູນທີ່ນ້ອຍທີ່ສຸດໃນຄອມພິວເຕີ
ແຕ່ລະບິດຈະເກັບຄ່າໄດ້ພຽງ 0 ຫຼື 1 ເທົ່ານັ້ນ ຖ້າເອົາຫຼາຍໆບິດມາຕໍ່ກັນ ເຮົາຈະເກັບຕົວເລກໃຫ່ຍຂື້ນໄດ້ ຕາມຕົວຢ່າງນີ້ :

1 bit → ເກັບໄດ້ 2 ຄ່າ (0,1)

2 bit → ເກັບໄດ້ 4 ຄ່າ (00, 01, 10, 11)

8 bit = 1 byte → ເກັບໄດ້ 256 ຄ່າ (0–255)


*/